{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isComplexDataType from '@stdlib/ndarray-base-assert-is-complex-floating-point-data-type';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport isReadOnly from '@stdlib/ndarray-base-assert-is-read-only';\nimport getDType from '@stdlib/ndarray-dtype';\nimport getShape from '@stdlib/ndarray-shape';\nimport getStrides from '@stdlib/ndarray-strides';\nimport getOffset from '@stdlib/ndarray-offset';\nimport getOrder from '@stdlib/ndarray-order';\nimport numel from '@stdlib/ndarray-base-numel';\nimport ind2sub from '@stdlib/ndarray-base-ind2sub';\nimport real from '@stdlib/complex-float64-real';\nimport imag from '@stdlib/complex-float64-imag';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// FUNCTIONS //\n\n/**\n* Tests whether an object has a specified method.\n*\n* @private\n* @param {Object} obj - input object\n* @param {string} method - method name\n* @returns {boolean} boolean indicating whether an object has a specified method\n*\n* @example\n* var bool = hasMethod( [], 'toJSON' );\n* // returns false\n*/\nfunction hasMethod( obj, method ) {\n\treturn ( typeof obj[ method ] === 'function' );\n}\n\n\n// MAIN //\n\n/**\n* Serializes an ndarray as a JSON object.\n*\n* ## Notes\n*\n* -   The function does **not** serialize data outside of the buffer region defined by the ndarray view.\n*\n* @param {ndarrayLike} x - input ndarray\n* @throws {TypeError} must provide an ndarray-like object\n* @returns {Object} JSON representation\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n*\n* var x = array( [ [ 1.0, 2.0 ], [ 3.0, 4.0 ] ] );\n* // returns <ndarray>\n*\n* var o = toJSON( x );\n* // returns {...}\n*/\nfunction toJSON( x ) {\n\tvar out;\n\tvar len;\n\tvar sh;\n\tvar st;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'nullDv', x ) );\n\t}\n\t// Defer to input argument's custom implementation, if already defined...\n\tif ( hasMethod( x, 'toJSON' ) ) {\n\t\treturn x.toJSON();\n\t}\n\t// Build an object containing all ndarray properties needed to revive a serialized ndarray...\n\tout = {};\n\tout.type = 'ndarray';\n\tout.dtype = getDType( x );\n\tout.flags = {\n\t\t'READONLY': isReadOnly( x )\n\t};\n\tout.order = getOrder( x );\n\n\tsh = getShape( x );\n\tout.shape = sh;\n\n\tst = getStrides( x );\n\tout.strides = st.slice();\n\n\to = getOffset( x );\n\n\tlen = numel( out.shape );\n\n\t// Flip the signs of negative strides:\n\tfor ( i = 0; i < st.length; i++ ) {\n\t\tif ( out.strides[ i ] < 0 ) {\n\t\t\tout.strides[ i ] *= -1;\n\t\t}\n\t}\n\t// Cast data to generic array...\n\tout.data = [];\n\tif ( isComplexDataType( out.dtype ) ) {\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tv = x.get.apply( x, ind2sub( sh, st, o, out.order, i, 'throw' ) );\n\t\t\tout.data.push( real( v ), imag( v ) );\n\t\t}\n\t} else {\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tout.data.push( x.get.apply( x, ind2sub( sh, st, o, out.order, i, 'throw' ) ) );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default toJSON;\n"],"names":["toJSON","x","out","len","sh","st","o","v","i","isndarrayLike","TypeError","format","type","dtype","getDType","flags","READONLY","isReadOnly","order","getOrder","getShape","shape","getStrides","strides","slice","getOffset","numel","length","data","isComplexDataType","get","apply","ind2sub","push","real","imag"],"mappings":";;ouCA+EA,SAASA,EAAQC,GAChB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMC,EAAeR,GACpB,MAAM,IAAIS,UAAWC,EAAQ,SAAUV,IAGxC,GAvCkC,mBAuClBA,EAAG,UAClB,OAAOA,EAAED,SAsBV,KAnBAE,EAAM,CAAA,GACFU,KAAO,UACXV,EAAIW,MAAQC,EAAUb,GACtBC,EAAIa,MAAQ,CACXC,SAAYC,EAAYhB,IAEzBC,EAAIgB,MAAQC,EAAUlB,GAEtBG,EAAKgB,EAAUnB,GACfC,EAAImB,MAAQjB,EAEZC,EAAKiB,EAAYrB,GACjBC,EAAIqB,QAAUlB,EAAGmB,QAEjBlB,EAAImB,EAAWxB,GAEfE,EAAMuB,EAAOxB,EAAImB,OAGXb,EAAI,EAAGA,EAAIH,EAAGsB,OAAQnB,IACtBN,EAAIqB,QAASf,GAAM,IACvBN,EAAIqB,QAASf,KAAQ,GAKvB,GADAN,EAAI0B,KAAO,GACNC,EAAmB3B,EAAIW,OAC3B,IAAML,EAAI,EAAGA,EAAIL,EAAKK,IACrBD,EAAIN,EAAE6B,IAAIC,MAAO9B,EAAG+B,EAAS5B,EAAIC,EAAIC,EAAGJ,EAAIgB,MAAOV,EAAG,UACtDN,EAAI0B,KAAKK,KAAMC,EAAM3B,GAAK4B,EAAM5B,SAGjC,IAAMC,EAAI,EAAGA,EAAIL,EAAKK,IACrBN,EAAI0B,KAAKK,KAAMhC,EAAE6B,IAAIC,MAAO9B,EAAG+B,EAAS5B,EAAIC,EAAIC,EAAGJ,EAAIgB,MAAOV,EAAG,WAGnE,OAAON,CACR"}